@echo off
setlocal enabledelayedexpansion

REM Check if project name is provided
if "%~1"=="" (
    echo ERROR: Please provide a project name.
    echo Usage: tsproject.cmd project_name
    exit /b 1
)

set PROJECT_NAME=%~1

REM Check if we're already in a directory with the project name
if "%CD:~-\%PROJECT_NAME%"=="%PROJECT_NAME%" (
    echo Already in %PROJECT_NAME% directory.
    set PROJECT_DIR=%CD%
    goto continue_setup
)

REM Check if project directory exists
if exist "%PROJECT_NAME%\" (
    echo %PROJECT_NAME% directory already exists.
    echo Navigating to existing directory...
    cd "%PROJECT_NAME%"
    set PROJECT_DIR=%CD%
    goto continue_setup
)

REM Create and navigate to project directory
echo Creating %PROJECT_NAME% directory...
mkdir "%PROJECT_NAME%"
cd "%PROJECT_NAME%"
set PROJECT_DIR=%CD%

:continue_setup
echo Setting up TypeScript project in: %PROJECT_DIR%

REM Create project directory structure
echo Creating directory structure...
mkdir "%PROJECT_DIR%\src"
mkdir "%PROJECT_DIR%\dist"
mkdir "%PROJECT_DIR%\tests"
mkdir "%PROJECT_DIR%\docs"
mkdir "%PROJECT_DIR%\types"

REM Create package.json
echo Creating package.json...
echo { > "%PROJECT_DIR%\package.json"
echo   "name": "%PROJECT_NAME%", >> "%PROJECT_DIR%\package.json"
echo   "version": "0.1.0", >> "%PROJECT_DIR%\package.json"
echo   "description": "A TypeScript project", >> "%PROJECT_DIR%\package.json"
echo   "main": "dist/index.js", >> "%PROJECT_DIR%\package.json"
echo   "types": "dist/index.d.ts", >> "%PROJECT_DIR%\package.json"
echo   "scripts": { >> "%PROJECT_DIR%\package.json"
echo     "build": "tsc", >> "%PROJECT_DIR%\package.json"
echo     "dev": "tsc --watch", >> "%PROJECT_DIR%\package.json"
echo     "test": "jest", >> "%PROJECT_DIR%\package.json"
echo     "lint": "eslint . --ext .ts", >> "%PROJECT_DIR%\package.json"
echo     "format": "prettier --write .", >> "%PROJECT_DIR%\package.json"
echo     "coverage": "jest --coverage" >> "%PROJECT_DIR%\package.json"
echo   }, >> "%PROJECT_DIR%\package.json"
echo   "keywords": ["typescript", "project"], >> "%PROJECT_DIR%\package.json"
echo   "author": "Your Name <your.email@example.com>", >> "%PROJECT_DIR%\package.json"
echo   "license": "MIT", >> "%PROJECT_DIR%\package.json"
echo   "devDependencies": {}, >> "%PROJECT_DIR%\package.json"
echo   "dependencies": {} >> "%PROJECT_DIR%\package.json"
echo } >> "%PROJECT_DIR%\package.json"

REM Create tsconfig.json
echo Creating tsconfig.json...
echo { > "%PROJECT_DIR%\tsconfig.json"
echo   "compilerOptions": { >> "%PROJECT_DIR%\tsconfig.json"
echo     "target": "es2020", >> "%PROJECT_DIR%\tsconfig.json"
echo     "module": "commonjs", >> "%PROJECT_DIR%\tsconfig.json"
echo     "declaration": true, >> "%PROJECT_DIR%\tsconfig.json"
echo     "outDir": "./dist", >> "%PROJECT_DIR%\tsconfig.json"
echo     "rootDir": "./src", >> "%PROJECT_DIR%\tsconfig.json"
echo     "strict": true, >> "%PROJECT_DIR%\tsconfig.json"
echo     "esModuleInterop": true, >> "%PROJECT_DIR%\tsconfig.json"
echo     "skipLibCheck": true, >> "%PROJECT_DIR%\tsconfig.json"
echo     "forceConsistentCasingInFileNames": true, >> "%PROJECT_DIR%\tsconfig.json"
echo     "resolveJsonModule": true >> "%PROJECT_DIR%\tsconfig.json"
echo   }, >> "%PROJECT_DIR%\tsconfig.json"
echo   "include": ["src/**/*"], >> "%PROJECT_DIR%\tsconfig.json"
echo   "exclude": ["node_modules", "**/*.test.ts"] >> "%PROJECT_DIR%\tsconfig.json"
echo } >> "%PROJECT_DIR%\tsconfig.json"

REM Create jest.config.js
echo Creating jest.config.js...
echo module.exports = { > "%PROJECT_DIR%\jest.config.js"
echo   preset: 'ts-jest', >> "%PROJECT_DIR%\jest.config.js"
echo   testEnvironment: 'node', >> "%PROJECT_DIR%\jest.config.js"
echo   testMatch: ['**/*.test.ts'], >> "%PROJECT_DIR%\jest.config.js"
echo   collectCoverageFrom: ['src/**/*.ts'], >> "%PROJECT_DIR%\jest.config.js"
echo   coverageDirectory: 'coverage', >> "%PROJECT_DIR%\jest.config.js"
echo   coverageReporters: ['text', 'lcov'] >> "%PROJECT_DIR%\jest.config.js"
echo }; >> "%PROJECT_DIR%\jest.config.js"

REM Create .eslintrc.json
echo Creating .eslintrc.json...
echo { > "%PROJECT_DIR%\.eslintrc.json"
echo   "parser": "@typescript-eslint/parser", >> "%PROJECT_DIR%\.eslintrc.json"
echo   "extends": [ >> "%PROJECT_DIR%\.eslintrc.json"
echo     "eslint:recommended", >> "%PROJECT_DIR%\.eslintrc.json"
echo     "plugin:@typescript-eslint/recommended" >> "%PROJECT_DIR%\.eslintrc.json"
echo   ], >> "%PROJECT_DIR%\.eslintrc.json"
echo   "plugins": ["@typescript-eslint"], >> "%PROJECT_DIR%\.eslintrc.json"
echo   "env": { >> "%PROJECT_DIR%\.eslintrc.json"
echo     "node": true, >> "%PROJECT_DIR%\.eslintrc.json"
echo     "es2020": true, >> "%PROJECT_DIR%\.eslintrc.json"
echo     "jest": true >> "%PROJECT_DIR%\.eslintrc.json"
echo   }, >> "%PROJECT_DIR%\.eslintrc.json"
echo   "rules": { >> "%PROJECT_DIR%\.eslintrc.json"
echo     "@typescript-eslint/explicit-function-return-type": "warn", >> "%PROJECT_DIR%\.eslintrc.json"
echo     "@typescript-eslint/no-explicit-any": "warn" >> "%PROJECT_DIR%\.eslintrc.json"
echo   }, >> "%PROJECT_DIR%\.eslintrc.json"
echo   "ignorePatterns": ["dist", "node_modules", "coverage"] >> "%PROJECT_DIR%\.eslintrc.json"
echo } >> "%PROJECT_DIR%\.eslintrc.json"

REM Create .prettierrc.json
echo Creating .prettierrc.json...
echo { > "%PROJECT_DIR%\.prettierrc.json"
echo   "semi": true, >> "%PROJECT_DIR%\.prettierrc.json"
echo   "singleQuote": true, >> "%PROJECT_DIR%\.prettierrc.json"
echo   "tabWidth": 2, >> "%PROJECT_DIR%\.prettierrc.json"
echo   "printWidth": 80, >> "%PROJECT_DIR%\.prettierrc.json"
echo   "trailingComma": "es5" >> "%PROJECT_DIR%\.prettierrc.json"
echo } >> "%PROJECT_DIR%\.prettierrc.json"

REM Create sample TypeScript module
echo Creating sample TypeScript module...
echo /**  > "%PROJECT_DIR%\src\index.ts"
echo  * Sample TypeScript module. >> "%PROJECT_DIR%\src\index.ts"
echo  */ >> "%PROJECT_DIR%\src\index.ts"
echo. >> "%PROJECT_DIR%\src\index.ts"
echo /**  >> "%PROJECT_DIR%\src\index.ts"
echo  * Return a greeting message. >> "%PROJECT_DIR%\src\index.ts"
echo  * @param name - The name to greet. >> "%PROJECT_DIR%\src\index.ts"
echo  * @returns A greeting message. >> "%PROJECT_DIR%\src\index.ts"
echo  */ >> "%PROJECT_DIR%\src\index.ts"
echo export function hello(name: string): string { >> "%PROJECT_DIR%\src\index.ts"
echo   return `Hello, ${name}!`; >> "%PROJECT_DIR%\src\index.ts"
echo } >> "%PROJECT_DIR%\src\index.ts"
echo. >> "%PROJECT_DIR%\src\index.ts"
echo /**  >> "%PROJECT_DIR%\src\index.ts"
echo  * A simple interface for a user. >> "%PROJECT_DIR%\src\index.ts"
echo  */ >> "%PROJECT_DIR%\src\index.ts"
echo export interface User { >> "%PROJECT_DIR%\src\index.ts"
echo   id: number; >> "%PROJECT_DIR%\src\index.ts"
echo   name: string; >> "%PROJECT_DIR%\src\index.ts"
echo   email?: string; >> "%PROJECT_DIR%\src\index.ts"
echo } >> "%PROJECT_DIR%\src\index.ts"
echo. >> "%PROJECT_DIR%\src\index.ts"
echo /**  >> "%PROJECT_DIR%\src\index.ts"
echo  * Create a user object. >> "%PROJECT_DIR%\src\index.ts"
echo  * @param name - The user's name. >> "%PROJECT_DIR%\src\index.ts"
echo  * @param email - The user's email (optional). >> "%PROJECT_DIR%\src\index.ts"
echo  * @returns A user object. >> "%PROJECT_DIR%\src\index.ts"
echo  */ >> "%PROJECT_DIR%\src\index.ts"
echo export function createUser(name: string, email?: string): User { >> "%PROJECT_DIR%\src\index.ts"
echo   return { >> "%PROJECT_DIR%\src\index.ts"
echo     id: Math.floor(Math.random() * 1000), >> "%PROJECT_DIR%\src\index.ts"
echo     name, >> "%PROJECT_DIR%\src\index.ts"
echo     ...(email ? { email } : {}), >> "%PROJECT_DIR%\src\index.ts"
echo   }; >> "%PROJECT_DIR%\src\index.ts"
echo } >> "%PROJECT_DIR%\src\index.ts"

REM Create sample TypeScript test
echo Creating sample TypeScript test...
echo /**  > "%PROJECT_DIR%\tests\index.test.ts"
echo  * Tests for the sample TypeScript module. >> "%PROJECT_DIR%\tests\index.test.ts"
echo  */ >> "%PROJECT_DIR%\tests\index.test.ts"
echo. >> "%PROJECT_DIR%\tests\index.test.ts"
echo import { hello, createUser, User } from '../src/index'; >> "%PROJECT_DIR%\tests\index.test.ts"
echo. >> "%PROJECT_DIR%\tests\index.test.ts"
echo describe('hello function', () => { >> "%PROJECT_DIR%\tests\index.test.ts"
echo   test('returns correct greeting', () => { >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(hello('World')).toBe('Hello, World!'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(hello('TypeScript')).toBe('Hello, TypeScript!'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\index.test.ts"
echo }); >> "%PROJECT_DIR%\tests\index.test.ts"
echo. >> "%PROJECT_DIR%\tests\index.test.ts"
echo describe('createUser function', () => { >> "%PROJECT_DIR%\tests\index.test.ts"
echo   test('creates user with required properties', () => { >> "%PROJECT_DIR%\tests\index.test.ts"
echo     const user = createUser('John Doe'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user).toHaveProperty('id'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user.name).toBe('John Doe'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user.email).toBeUndefined(); >> "%PROJECT_DIR%\tests\index.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\index.test.ts"
echo. >> "%PROJECT_DIR%\tests\index.test.ts"
echo   test('creates user with optional email', () => { >> "%PROJECT_DIR%\tests\index.test.ts"
echo     const user = createUser('Jane Doe', 'jane@example.com'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user).toHaveProperty('id'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user.name).toBe('Jane Doe'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo     expect(user.email).toBe('jane@example.com'); >> "%PROJECT_DIR%\tests\index.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\index.test.ts"
echo }); >> "%PROJECT_DIR%\tests\index.test.ts"

REM Create template structure test
echo Creating template structure test...
echo /**  > "%PROJECT_DIR%\tests\template-structure.test.ts"
echo  * Tests to validate that the TypeScript project follows the template structure. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo  */ >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo import * as fs from 'fs'; >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo import * as path from 'path'; >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo describe('Project structure validation', () => { >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   test('has required directories', () => { >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('src')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('dist')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('tests')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('docs')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('types')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   test('has required configuration files', () => { >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('package.json')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('tsconfig.json')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('jest.config.js')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('.eslintrc.json')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('.prettierrc.json')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('.gitignore')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   test('has sample TypeScript module', () => { >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('src/index.ts')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     const indexContent = fs.readFileSync('src/index.ts', 'utf8'); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(indexContent).toContain('export function hello'); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(indexContent).toContain('export interface User'); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo. >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   test('has sample TypeScript test', () => { >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(fs.existsSync('tests/index.test.ts')).toBe(true); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     const testContent = fs.readFileSync('tests/index.test.ts', 'utf8'); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(testContent).toContain('import { hello'); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(testContent).toContain('describe('); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo     expect(testContent).toContain('test('); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo   }); >> "%PROJECT_DIR%\tests\template-structure.test.ts"
echo }); >> "%PROJECT_DIR%\tests\template-structure.test.ts"

REM Create README.md
echo Creating README.md...
echo # %PROJECT_NAME% > "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo A TypeScript project. >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ## Installation >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ```bash >> "%PROJECT_DIR%\README.md"
echo # Clone the repository >> "%PROJECT_DIR%\README.md"
echo git clone https://github.com/yourusername/%PROJECT_NAME%.git >> "%PROJECT_DIR%\README.md"
echo cd %PROJECT_NAME% >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Install dependencies >> "%PROJECT_DIR%\README.md"
echo npm install >> "%PROJECT_DIR%\README.md"
echo ``` >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ## Usage >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ```typescript >> "%PROJECT_DIR%\README.md"
echo import { hello, createUser } from '%PROJECT_NAME%'; >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo // Greeting >> "%PROJECT_DIR%\README.md"
echo const greeting = hello('World'); >> "%PROJECT_DIR%\README.md"
echo console.log(greeting); // Output: Hello, World! >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo // Create a user >> "%PROJECT_DIR%\README.md"
echo const user = createUser('John Doe', 'john@example.com'); >> "%PROJECT_DIR%\README.md"
echo console.log(user); >> "%PROJECT_DIR%\README.md"
echo ``` >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ## Development >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo ```bash >> "%PROJECT_DIR%\README.md"
echo # Build the project >> "%PROJECT_DIR%\README.md"
echo npm run build >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Run in development mode with watch >> "%PROJECT_DIR%\README.md"
echo npm run dev >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Run tests >> "%PROJECT_DIR%\README.md"
echo npm test >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Run tests with coverage >> "%PROJECT_DIR%\README.md"
echo npm run coverage >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Lint code >> "%PROJECT_DIR%\README.md"
echo npm run lint >> "%PROJECT_DIR%\README.md"
echo. >> "%PROJECT_DIR%\README.md"
echo # Format code >> "%PROJECT_DIR%\README.md"
echo npm run format >> "%PROJECT_DIR%\README.md"
echo ``` >> "%PROJECT_DIR%\README.md"

REM Create .gitignore
echo Creating .gitignore...
echo # Logs > "%PROJECT_DIR%\.gitignore"
echo logs >> "%PROJECT_DIR%\.gitignore"
echo *.log >> "%PROJECT_DIR%\.gitignore"
echo npm-debug.log* >> "%PROJECT_DIR%\.gitignore"
echo yarn-debug.log* >> "%PROJECT_DIR%\.gitignore"
echo yarn-error.log* >> "%PROJECT_DIR%\.gitignore"
echo lerna-debug.log* >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Diagnostic reports (https://nodejs.org/api/report.html) >> "%PROJECT_DIR%\.gitignore"
echo report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Runtime data >> "%PROJECT_DIR%\.gitignore"
echo pids >> "%PROJECT_DIR%\.gitignore"
echo *.pid >> "%PROJECT_DIR%\.gitignore"
echo *.seed >> "%PROJECT_DIR%\.gitignore"
echo *.pid.lock >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Directory for instrumented libs generated by jscoverage/JSCover >> "%PROJECT_DIR%\.gitignore"
echo lib-cov >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Coverage directory used by tools like istanbul >> "%PROJECT_DIR%\.gitignore"
echo coverage >> "%PROJECT_DIR%\.gitignore"
echo *.lcov >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # nyc test coverage >> "%PROJECT_DIR%\.gitignore"
echo .nyc_output >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Dependency directories >> "%PROJECT_DIR%\.gitignore"
echo node_modules/ >> "%PROJECT_DIR%\.gitignore"
echo jspm_packages/ >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # TypeScript cache >> "%PROJECT_DIR%\.gitignore"
echo *.tsbuildinfo >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # TypeScript output >> "%PROJECT_DIR%\.gitignore"
echo dist >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Optional npm cache directory >> "%PROJECT_DIR%\.gitignore"
echo .npm >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # Optional eslint cache >> "%PROJECT_DIR%\.gitignore"
echo .eslintcache >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # dotenv environment variables file >> "%PROJECT_DIR%\.gitignore"
echo .env >> "%PROJECT_DIR%\.gitignore"
echo .env.test >> "%PROJECT_DIR%\.gitignore"
echo .env.local >> "%PROJECT_DIR%\.gitignore"
echo .env.development.local >> "%PROJECT_DIR%\.gitignore"
echo .env.test.local >> "%PROJECT_DIR%\.gitignore"
echo .env.production.local >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # IDE files >> "%PROJECT_DIR%\.gitignore"
echo .idea/ >> "%PROJECT_DIR%\.gitignore"
echo .vscode/ >> "%PROJECT_DIR%\.gitignore"
echo *.swp >> "%PROJECT_DIR%\.gitignore"
echo *.swo >> "%PROJECT_DIR%\.gitignore"
echo. >> "%PROJECT_DIR%\.gitignore"
echo # OS files >> "%PROJECT_DIR%\.gitignore"
echo .DS_Store >> "%PROJECT_DIR%\.gitignore"
echo Thumbs.db >> "%PROJECT_DIR%\.gitignore"
echo ehthumbs.db >> "%PROJECT_DIR%\.gitignore"

REM Create LICENSE file
echo Creating LICENSE file...
echo MIT License > "%PROJECT_DIR%\LICENSE"
echo. >> "%PROJECT_DIR%\LICENSE"
echo Copyright (c) %date:~10,4% Your Name >> "%PROJECT_DIR%\LICENSE"
echo. >> "%PROJECT_DIR%\LICENSE"
echo Permission is hereby granted, free of charge, to any person obtaining a copy >> "%PROJECT_DIR%\LICENSE"
echo of this software and associated documentation files (the "Software"), to deal >> "%PROJECT_DIR%\LICENSE"
echo in the Software without restriction, including without limitation the rights >> "%PROJECT_DIR%\LICENSE"
echo to use, copy, modify, merge, publish, distribute, sublicense, and/or sell >> "%PROJECT_DIR%\LICENSE"
echo copies of the Software, and to permit persons to whom the Software is >> "%PROJECT_DIR%\LICENSE"
echo furnished to do so, subject to the following conditions: >> "%PROJECT_DIR%\LICENSE"
echo. >> "%PROJECT_DIR%\LICENSE"
echo The above copyright notice and this permission notice shall be included in all >> "%PROJECT_DIR%\LICENSE"
echo copies or substantial portions of the Software. >> "%PROJECT_DIR%\LICENSE"
echo. >> "%PROJECT_DIR%\LICENSE"
echo THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR >> "%PROJECT_DIR%\LICENSE"
echo IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, >> "%PROJECT_DIR%\LICENSE"
echo FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE >> "%PROJECT_DIR%\LICENSE"
echo AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER >> "%PROJECT_DIR%\LICENSE"
echo LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, >> "%PROJECT_DIR%\LICENSE"
echo OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE >> "%PROJECT_DIR%\LICENSE"
echo SOFTWARE. >> "%PROJECT_DIR%\LICENSE"

REM Create a TypeScript setup README
echo Creating TS_SETUP_README.md...
echo # TypeScript Project Setup Script > "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo This script automates the creation of a new TypeScript project with a standard directory structure and configuration files. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ## Features >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Creates a standard TypeScript project structure >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Sets up TypeScript configuration with tsconfig.json >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Configures Jest for TypeScript testing >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Sets up ESLint and Prettier with TypeScript support >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Creates package.json with common scripts >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Includes sample TypeScript modules with interfaces and type definitions >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Adds a LICENSE file (MIT) >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Creates a README.md with usage instructions >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo - Provides tests to validate project structure >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ## Usage >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo tsproject.cmd project_name >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo Replace `project_name` with the name of your project. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ## Project Structure >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo The script creates the following structure: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ```  >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo project_name/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── src/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo │   └── index.ts >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── dist/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── tests/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo │   ├── index.test.ts >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo │   └── template-structure.test.ts >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── docs/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── types/ >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── package.json >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── tsconfig.json >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── jest.config.js >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── .eslintrc.json >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── .prettierrc.json >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── .gitignore >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── LICENSE >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ├── README.md >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo └── TS_SETUP_README.md >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo ## Getting Started >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo After running the script: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo. >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo 1. Install dependencies: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    npm install >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo 2. Install development dependencies: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    npm install --save-dev typescript ts-jest @types/jest jest @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint prettier >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo 3. Build the project: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    npm run build >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo 4. Run tests: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    npm test >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo 5. Validate project structure: >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ```bash >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    npm test tests/template-structure.test.ts >> "%PROJECT_DIR%\TS_SETUP_README.md"
echo    ``` >> "%PROJECT_DIR%\TS_SETUP_README.md"

REM Display completion message
echo.
echo TypeScript project setup complete!
echo.
echo Next steps:
echo 1. Install dependencies: npm install
echo 2. Install development dependencies: npm install --save-dev typescript ts-jest @types/jest jest @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint prettier
echo 3. Build the project: npm run build
echo 4. Run tests: npm test
echo 5. Validate project structure: npm test tests/template-structure.test.ts
echo.
echo For more information, see TS_SETUP_README.md

endlocal